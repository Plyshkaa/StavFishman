package com.example.fishingforecastappstav

import android.content.Intent
import android.graphics.Color
import android.os.Bundle
import android.util.Log
import android.view.View
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.WindowCompat
import androidx.appcompat.app.AlertDialog
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import android.view.LayoutInflater

import com.example.fishingforecastappstav.mainScreen.FishSelectionAdapter
import com.example.fishingforecastappstav.databinding.ActivityMainBinding
import com.example.fishingforecastappstav.mainScreen.AboutScreen
import com.example.fishingforecastappstav.mainScreen.Fish
import com.example.fishingforecastappstav.mainScreen.FishAdapter
import com.example.fishingforecastappstav.mainScreen.GuideActivity
import com.example.fishingforecastappstav.mainScreen.MapActivity
import com.example.fishingforecastappstav.utils.DateUtils
import com.example.fishingforecastappstav.utils.ForecastUtils
import com.example.fishingforecastappstav.weather.WeatherManager

class MainActivity : AppCompatActivity() {

    // View Binding
    private lateinit var binding: ActivityMainBinding
    
    // –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
    private lateinit var weatherManager: WeatherManager


    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —Ä—ã–± (RecyclerView)
    private val fishList = listOf(
        Fish("–û–∫—É–Ω—å", R.drawable.ic_okun1, "–õ—É—á—à–∏–π –∫–ª–µ–≤ –≤ —É—Ç—Ä–µ–Ω–Ω–∏–µ —á–∞—Å—ã."),
        Fish("–©—É–∫–∞", R.drawable.ic_pike, "–•–∏—â–Ω–∏–∫, –∫–ª—é—ë—Ç –≤ —Å—É–º–µ—Ä–∫–∏."),
        Fish("–õ–µ—â", R.drawable.ic_bream, "–ü–∏—Ç–∞–µ—Ç—Å—è –≤ –ø–∞—Å–º—É—Ä–Ω—ã–µ –¥–Ω–∏."),
        Fish("–ö–∞—Ä–∞—Å—å", R.drawable.ic_crucian_carp, "–ß–∞—Å—Ç–æ —Ä–∞–∑–≤–æ–¥–∏—Ç—Å—è –≤ –ø—Ä—É–¥–∞—Ö, —É—Å—Ç–æ–π—á–∏–≤ –¥–∞–∂–µ –∫ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º."),
        Fish("–ü–ª–æ—Ç–≤–∞", R.drawable.ic_roach, "–ê–∫—Ç–∏–≤–Ω–æ –∫–æ—Ä–º–∏—Ç—Å—è –≤ –ø—Ä–µ—Å–Ω–æ–π –≤–æ–¥–µ, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ –æ—Å–µ–Ω–Ω–∏–π –ø–µ—Ä–∏–æ–¥."),
        Fish("–°—É–¥–∞–∫", R.drawable.ic_zander, "–¶–µ–Ω–∏—Ç—Å—è –∑–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω—É—é –ª–æ–≤–ª—é, –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ —á–∏—Å—Ç—ã—Ö —Ä–µ–∫–∞—Ö –∏ –æ–∑—ë—Ä–∞—Ö."),
        Fish("–°–∞–∑–∞–Ω", R.drawable.ic_carp, "–ö—Ä—É–ø–Ω–∞—è —Ä—ã–±–∞, —á–∞—Å—Ç–æ —Ä–∞–∑–≤–æ–¥–∏–º–∞—è –≤ –≤–æ–¥–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–∞—Ö –∏ –ø—Ä—É–¥–∞—Ö.")
    )

    // –¢–µ–∫—É—â–∏–µ –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    private var currentWeatherData: WeatherManager.WeatherData? = null
    private lateinit var fishSelectionDialog: AlertDialog

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        initializeManagers()
        setupUI()
        loadInitialData()
    }

    override fun onResume() {
        super.onResume()
        updateDate()
        refreshWeatherData()
    }

    private fun initializeManagers() {
        weatherManager = WeatherManager()

    }

    private fun setupUI() {
        // –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
        WindowCompat.setDecorFitsSystemWindows(window, false)
        val windowInsetsController = WindowCompat.getInsetsController(window, window.decorView)
        windowInsetsController.apply {
            isAppearanceLightStatusBars = true
            isAppearanceLightNavigationBars = true
        }
        window.statusBarColor = Color.TRANSPARENT
        window.navigationBarColor = Color.TRANSPARENT

        // –°–∫—Ä—ã–≤–∞–µ–º ActionBar
        supportActionBar?.hide()

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º RecyclerView —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä—ã–±
        setupFishRecyclerView()

        // –ö–Ω–æ–ø–∫–∞ "–í—ã–±–µ—Ä–∏—Ç–µ —Ä—ã–±—É" - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞
        binding.btnSelectFish.setOnClickListener {
            showFishSelectionDialog()
        }
        
        // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –≤—ã–±–æ—Ä–∞ —Ä—ã–±—ã
        binding.btnResetFish.setOnClickListener {
            resetFishSelection()
        }
    }



    private fun loadInitialData() {
        updateDate()
        fetchWeatherData()
    }

    private fun updateDate() {
        binding.tvCurrentDate.text = DateUtils.getCurrentDate()
    }

    private fun setupFishRecyclerView() {
        val adapter = FishAdapter { fish ->
            Log.d("MainActivity", "–ù–∞–∂–∞—Ç–∞ —Ä—ã–±–∞: ${fish.name}")
            openFishDetails(fish)
        }
        binding.rvFishList.layoutManager = LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false)
        binding.rvFishList.adapter = adapter
        adapter.submitList(fishList)
    }

    private fun fetchWeatherData() {
        weatherManager.fetchWeather(object : WeatherManager.WeatherCallback {
            override fun onWeatherLoaded(weatherData: WeatherManager.WeatherData) {
                currentWeatherData = weatherData
                binding.tvWeatherForecast.text = weatherManager.formatWeatherInfo(weatherData)
            }

            override fun onWeatherError(error: String) {
                binding.tvWeatherForecast.text = "–û—à–∏–±–∫–∞: $error"
            }
        })
    }

    private fun refreshWeatherData() {
        fetchWeatherData()
    }



    // –ö–∞—Å—Ç–æ–º–Ω—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä—ã–±—ã
    private fun showFishSelectionDialog() {
        val dialogView = LayoutInflater.from(this).inflate(R.layout.fish_selection_dialog, null)
        val recyclerView = dialogView.findViewById<RecyclerView>(R.id.rvFishSelection)
        
        recyclerView.layoutManager = LinearLayoutManager(this)
        val adapter = FishSelectionAdapter(fishList) { selectedFish ->
            calculateAndDisplayForecast(selectedFish)
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
            if (::fishSelectionDialog.isInitialized) {
                fishSelectionDialog.dismiss()
            }
        }
        recyclerView.adapter = adapter
        
        fishSelectionDialog = AlertDialog.Builder(this)
            .setView(dialogView)
            .setCancelable(true)
            .create()
        
        fishSelectionDialog.show()
    }

    private fun calculateAndDisplayForecast(fish: Fish) {
        currentWeatherData?.let { weatherData ->
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
            val detailedForecast = ForecastUtils.getDetailedForecast(
                fishName = fish.name,
                temperature = weatherData.temperature,
                pressure = weatherData.pressure,
                windSpeed = weatherData.windSpeed,
                timeOfDay = weatherData.timeOfDay,
                season = weatherData.season,
                moonPhase = weatherData.moonPhase,
                isSpawning = weatherData.isSpawning
            )
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞
            val forecastText = buildString {
                append("üêü ${fish.name}: ${detailedForecast.forecastText} –∫–ª–µ–≤")
                append("\nüìä –ë–∞–ª–ª: ${detailedForecast.finalScore}/100")
                if (detailedForecast.recommendations.isNotEmpty()) {
                    append("\nüí° ${detailedForecast.recommendations.first()}")
                }
            }
            
            binding.tvCatchForecast.text = forecastText
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–±—Ä–æ—Å–∞
            binding.btnResetFish.visibility = View.VISIBLE
        } ?: run {
            binding.tvCatchForecast.text = "–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."
        }
    }
    
    private fun resetFishSelection() {
        binding.tvCatchForecast.text = "–ü—Ä–æ–≥–Ω–æ–∑ –∫–ª–µ–≤–∞ –¥–ª—è —Ä—ã–±—ã:"
        binding.btnResetFish.visibility = View.GONE
    }

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –¥–ª—è —Ä—ã–±—ã
    private fun openFishDetails(fish: Fish) {
        val intent = Intent(this, FishDetailActivity::class.java)
        intent.putExtra("fishName", fish.name)
        startActivity(intent)
    }
}
