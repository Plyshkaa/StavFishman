package com.example.fishingforecastappstav.weather

import com.example.fishingforecastappstav.mainScreen.RetrofitInstance
import com.example.fishingforecastappstav.mainScreen.WeatherResponse
import com.example.fishingforecastappstav.utils.Constants
import com.example.fishingforecastappstav.utils.DateUtils
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class WeatherManager {
    
    data class WeatherData(
        val temperature: Float,
        val pressure: Int,
        val windSpeed: Float,
        val timeOfDay: String,
        val season: String,
        val moonPhase: String,
        val isSpawning: Boolean
    )
    
    interface WeatherCallback {
        fun onWeatherLoaded(weatherData: WeatherData)
        fun onWeatherError(error: String)
    }
    
    fun fetchWeather(callback: WeatherCallback) {
        RetrofitInstance.api.getCurrentWeather(Constants.DEFAULT_CITY, Constants.WEATHER_API_KEY)
            .enqueue(object : Callback<WeatherResponse> {
                override fun onResponse(call: Call<WeatherResponse>, response: Response<WeatherResponse>) {
                    if (response.isSuccessful) {
                        val weatherData = response.body()
                        weatherData?.let {
                            val data = WeatherData(
                                temperature = it.main.temp,
                                pressure = it.main.pressure,
                                windSpeed = 3.5f, // –ó–∞–≥–ª—É—à–∫–∞, —Ç–∞–∫ –∫–∞–∫ API –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞
                                timeOfDay = DateUtils.getCurrentTimeOfDay(),
                                season = DateUtils.getSeason(),
                                moonPhase = "New Moon", // –ó–∞–≥–ª—É—à–∫–∞
                                isSpawning = false // –ó–∞–≥–ª—É—à–∫–∞
                            )
                            callback.onWeatherLoaded(data)
                        } ?: callback.onWeatherError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                    } else {
                        callback.onWeatherError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–≥–æ–¥—ã: ${response.code()}")
                    }
                }
                
                override fun onFailure(call: Call<WeatherResponse>, t: Throwable) {
                    callback.onWeatherError("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${t.message}")
                }
            })
    }
    
    fun formatWeatherInfo(weatherData: WeatherData): String {
        return StringBuilder().apply {
            appendLine("üå§Ô∏è –ü–æ–≥–æ–¥–∞ –∏ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞:")
            appendLine("‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${weatherData.temperature}¬∞C")
            appendLine("‚Ä¢ –î–∞–≤–ª–µ–Ω–∏–µ: ${weatherData.pressure} –º–º —Ä—Ç. —Å—Ç.")
            appendLine("‚Ä¢ –í–µ—Ç–µ—Ä: ${weatherData.windSpeed} –º/—Å")
            appendLine("‚Ä¢ –í—Ä–µ–º—è —Å—É—Ç–æ–∫: ${DateUtils.getTimeOfDayInRussian(weatherData.timeOfDay)}")
            appendLine("‚Ä¢ –°–µ–∑–æ–Ω: ${DateUtils.getSeasonInRussian(weatherData.season)}")
            appendLine("‚Ä¢ –§–∞–∑–∞ –ª—É–Ω—ã: ${DateUtils.getMoonPhaseInRussian(weatherData.moonPhase)}")
            appendLine("‚Ä¢ –ù–µ—Ä–µ—Å—Ç: ${DateUtils.getSpawningInRussian(weatherData.isSpawning)}")
        }.toString()
    }
}
