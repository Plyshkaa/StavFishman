package com.example.fishingforecastappstav.analysis

import com.example.fishingforecastappstav.utils.ForecastUtils
import com.example.fishingforecastappstav.utils.Constants

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∫–ª–µ–≤–∞
 */
class ForecastTest {
    
    companion object {
        
        fun runAllTests() {
            println("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ê–õ–ì–û–†–ò–¢–ú–ê –ü–†–û–ì–ù–û–ó–ê –ö–õ–ï–í–ê\n")
            
            testBasicCalculations()
            testFishSpecificLogic()
            testExtremeConditions()
            testDetailedForecast()
            
            println("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        }
        
        private fun testBasicCalculations() {
            println("üìä –¢–ï–°–¢ 1: –ë–∞–∑–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã")
            
            // –ò–¥–µ–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            val idealScore = ForecastUtils.calculateCatchScore(
                temp = 18f,
                pressure = 760,
                windSpeed = 4f,
                timeOfDay = Constants.TimeOfDay.MORNING,
                season = Constants.Season.SPRING,
                moonPhase = Constants.MoonPhase.NEW_MOON,
                isSpawning = false
            )
            println("   –ò–¥–µ–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: $idealScore –±–∞–ª–ª–æ–≤")
            assert(idealScore >= 80) { "–ò–¥–µ–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–æ–ª–∂–Ω—ã –¥–∞–≤–∞—Ç—å –≤—ã—Å–æ–∫–∏–π –±–∞–ª–ª" }
            
            // –ü–ª–æ—Ö–∏–µ —É—Å–ª–æ–≤–∏—è
            val badScore = ForecastUtils.calculateCatchScore(
                temp = 35f,
                pressure = 780,
                windSpeed = 15f,
                timeOfDay = Constants.TimeOfDay.NIGHT,
                season = Constants.Season.WINTER,
                moonPhase = Constants.MoonPhase.LAST_QUARTER,
                isSpawning = true
            )
            println("   –ü–ª–æ—Ö–∏–µ —É—Å–ª–æ–≤–∏—è: $badScore –±–∞–ª–ª–æ–≤")
            assert(badScore <= 30) { "–ü–ª–æ—Ö–∏–µ —É—Å–ª–æ–≤–∏—è –¥–æ–ª–∂–Ω—ã –¥–∞–≤–∞—Ç—å –Ω–∏–∑–∫–∏–π –±–∞–ª–ª" }
            
            println("   ‚úÖ –ë–∞–∑–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")
        }
        
        private fun testFishSpecificLogic() {
            println("üêü –¢–ï–°–¢ 2: –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä—ã–±")
            
            val fishNames = listOf("–û–∫—É–Ω—å", "–©—É–∫–∞", "–õ–µ—â", "–ö–∞—Ä–∞—Å—å", "–ü–ª–æ—Ç–≤–∞", "–°—É–¥–∞–∫", "–°–∞–∑–∞–Ω")
            
            // –¢–µ—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–π —Ä—ã–±—ã –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
            fishNames.forEach { fishName ->
                val factor = ForecastUtils.getFishFactorDynamic(
                    fishName = fishName,
                    temperature = 18f,
                    pressure = 760,
                    windSpeed = 4f,
                    timeOfDay = Constants.TimeOfDay.MORNING,
                    season = Constants.Season.SPRING,
                    moonPhase = Constants.MoonPhase.NEW_MOON,
                    isSpawning = false
                )
                
                println("   $fishName: –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç $factor")
                assert(factor in 0.3f..1.8f) { "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç $fishName –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞" }
            }
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä—ã–±
            testOku≈ÑLogic()
            testShchukaLogic()
            testSudakLogic()
            
            println("   ‚úÖ –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä—ã–± —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")
        }
        
        private fun testOku≈ÑLogic() {
            println("   üéØ –¢–µ—Å—Ç –æ–∫—É–Ω—è:")
            
            // –û–∫—É–Ω—å –¥–æ–ª–∂–µ–Ω –ª—é–±–∏—Ç—å —É—Ç—Ä–æ
            val morningFactor = ForecastUtils.getFishFactorDynamic(
                "–û–∫—É–Ω—å", 18f, 760, 4f, Constants.TimeOfDay.MORNING, Constants.Season.SPRING, Constants.MoonPhase.NEW_MOON, false
            )
            val nightFactor = ForecastUtils.getFishFactorDynamic(
                "–û–∫—É–Ω—å", 18f, 760, 4f, Constants.TimeOfDay.NIGHT, Constants.Season.SPRING, Constants.MoonPhase.NEW_MOON, false
            )
            
            println("     –£—Ç—Ä–æ: $morningFactor, –ù–æ—á—å: $nightFactor")
            assert(morningFactor > nightFactor) { "–û–∫—É–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–µ–Ω —É—Ç—Ä–æ–º" }
        }
        
        private fun testShchukaLogic() {
            println("   üéØ –¢–µ—Å—Ç —â—É–∫–∏:")
            
            // –©—É–∫–∞ –¥–æ–ª–∂–Ω–∞ –ª—é–±–∏—Ç—å –≤–µ—á–µ—Ä
            val eveningFactor = ForecastUtils.getFishFactorDynamic(
                "–©—É–∫–∞", 12f, 760, 4f, Constants.TimeOfDay.EVENING, Constants.Season.AUTUMN, Constants.MoonPhase.FULL_MOON, false
            )
            val dayFactor = ForecastUtils.getFishFactorDynamic(
                "–©—É–∫–∞", 12f, 760, 4f, Constants.TimeOfDay.DAY, Constants.Season.AUTUMN, Constants.MoonPhase.FULL_MOON, false
            )
            
            println("     –í–µ—á–µ—Ä: $eveningFactor, –î–µ–Ω—å: $dayFactor")
            assert(eveningFactor > dayFactor) { "–©—É–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω–∞ –≤–µ—á–µ—Ä–æ–º" }
        }
        
        private fun testSudakLogic() {
            println("   üéØ –¢–µ—Å—Ç —Å—É–¥–∞–∫–∞:")
            
            // –°—É–¥–∞–∫ –¥–æ–ª–∂–µ–Ω –ª—é–±–∏—Ç—å –Ω–æ—á—å
            val nightFactor = ForecastUtils.getFishFactorDynamic(
                "–°—É–¥–∞–∫", 15f, 760, 4f, Constants.TimeOfDay.NIGHT, Constants.Season.AUTUMN, Constants.MoonPhase.NEW_MOON, false
            )
            val dayFactor = ForecastUtils.getFishFactorDynamic(
                "–°—É–¥–∞–∫", 15f, 760, 4f, Constants.TimeOfDay.DAY, Constants.Season.AUTUMN, Constants.MoonPhase.NEW_MOON, false
            )
            
            println("     –ù–æ—á—å: $nightFactor, –î–µ–Ω—å: $dayFactor")
            assert(nightFactor > dayFactor) { "–°—É–¥–∞–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–µ–Ω –Ω–æ—á—å—é" }
        }
        
        private fun testExtremeConditions() {
            println("üå°Ô∏è –¢–ï–°–¢ 3: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è")
            
            // –û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ
            val coldScore = ForecastUtils.calculateCatchScore(
                temp = -10f,
                pressure = 750,
                windSpeed = 2f,
                timeOfDay = Constants.TimeOfDay.DAY,
                season = Constants.Season.WINTER,
                moonPhase = Constants.MoonPhase.NEW_MOON,
                isSpawning = false
            )
            println("   –û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ (-10¬∞C): $coldScore –±–∞–ª–ª–æ–≤")
            assert(coldScore <= 20) { "–ü—Ä–∏ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–º —Ö–æ–ª–æ–¥–µ –±–∞–ª–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∏–∑–∫–∏–º" }
            
            // –û—á–µ–Ω—å –∂–∞—Ä–∫–æ
            val hotScore = ForecastUtils.calculateCatchScore(
                temp = 40f,
                pressure = 740,
                windSpeed = 1f,
                timeOfDay = Constants.TimeOfDay.DAY,
                season = Constants.Season.SUMMER,
                moonPhase = Constants.MoonPhase.FULL_MOON,
                isSpawning = false
            )
            println("   –û—á–µ–Ω—å –∂–∞—Ä–∫–æ (40¬∞C): $hotScore –±–∞–ª–ª–æ–≤")
            assert(hotScore <= 25) { "–ü—Ä–∏ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π –∂–∞—Ä–µ –±–∞–ª–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∏–∑–∫–∏–º" }
            
            // –°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä
            val windyScore = ForecastUtils.calculateCatchScore(
                temp = 20f,
                pressure = 760,
                windSpeed = 20f,
                timeOfDay = Constants.TimeOfDay.MORNING,
                season = Constants.Season.SPRING,
                moonPhase = Constants.MoonPhase.NEW_MOON,
                isSpawning = false
            )
            println("   –°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä (20 –º/—Å): $windyScore –±–∞–ª–ª–æ–≤")
            assert(windyScore <= 40) { "–ü—Ä–∏ —Å–∏–ª—å–Ω–æ–º –≤–µ—Ç—Ä–µ –±–∞–ª–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–Ω–∏–∂–µ–Ω" }
            
            println("   ‚úÖ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")
        }
        
        private fun testDetailedForecast() {
            println("üìã –¢–ï–°–¢ 4: –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑")
            
            val detailedForecast = ForecastUtils.getDetailedForecast(
                fishName = "–û–∫—É–Ω—å",
                temperature = 18f,
                pressure = 760,
                windSpeed = 4f,
                timeOfDay = Constants.TimeOfDay.MORNING,
                season = Constants.Season.SPRING,
                moonPhase = Constants.MoonPhase.NEW_MOON,
                isSpawning = false
            )
            
            println("   –†—ã–±–∞: ${detailedForecast.fishName}")
            println("   –ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª: ${detailedForecast.baseScore}")
            println("   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: ${detailedForecast.fishFactor}")
            println("   –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–ª: ${detailedForecast.finalScore}")
            println("   –ü—Ä–æ–≥–Ω–æ–∑: ${detailedForecast.forecastText}")
            println("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: ${detailedForecast.recommendations.joinToString(", ")}")
            
            assert(detailedForecast.baseScore > 0) { "–ë–∞–∑–æ–≤—ã–π –±–∞–ª–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º" }
            assert(detailedForecast.fishFactor in 0.3f..1.8f) { "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ" }
            assert(detailedForecast.finalScore in 0..100) { "–§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-100" }
            assert(detailedForecast.recommendations.isNotEmpty()) { "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏" }
            
            println("   ‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")
        }
        
        fun testRealWorldScenarios() {
            println("üåç –¢–ï–°–¢ 5: –†–µ–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏")
            
            val scenarios = listOf(
                Triple("–í–µ—Å–µ–Ω–Ω–µ–µ —É—Ç—Ä–æ", 12f, Constants.TimeOfDay.MORNING),
                Triple("–õ–µ—Ç–Ω–∏–π –¥–µ–Ω—å", 25f, Constants.TimeOfDay.DAY),
                Triple("–û—Å–µ–Ω–Ω–∏–π –≤–µ—á–µ—Ä", 15f, Constants.TimeOfDay.EVENING),
                Triple("–ó–∏–º–Ω—è—è –Ω–æ—á—å", -5f, Constants.TimeOfDay.NIGHT)
            )
            
            scenarios.forEach { (name, temp, timeOfDay) ->
                val season = when {
                    temp >= 20f -> Constants.Season.SUMMER
                    temp >= 10f -> Constants.Season.SPRING
                    temp >= 0f -> Constants.Season.AUTUMN
                    else -> Constants.Season.WINTER
                }
                
                val score = ForecastUtils.calculateCatchScore(
                    temp = temp,
                    pressure = 760,
                    windSpeed = 5f,
                    timeOfDay = timeOfDay,
                    season = season,
                    moonPhase = Constants.MoonPhase.NEW_MOON,
                    isSpawning = false
                )
                
                val forecast = ForecastUtils.getForecastText(score)
                println("   $name (${temp}¬∞C): $score –±–∞–ª–ª–æ–≤ - $forecast")
            }
            
            println("   ‚úÖ –†–µ–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")
        }
    }
}
